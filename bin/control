#!/usr/bin/env bash

source "${OPENSHIFT_OCAML_CORE_DIR}usr/src/common.sh"

declare progname="${0}"
declare pidfile="${OPENSHIFT_DATA_DIR}server.pid"

function usage() {
    echo "Usage: ${progname} [build|start|stop|restart|status|tidy|*]"
}

function pid() {
    local pid=$( cat "${pidfile}" )
    echo "${pid}"
    test -n "${pid}" && kill -0 "${pid}" &>/dev/null
}

function run_hook() {
    local path="${OPENSHIFT_REPO_DIR}.openshift/action_hooks/${1}"
    if [ -f "${path}" -a -x "${path}" ]; then
        "${path}"
    else
        return 0
    fi
}

# for hookname in start stop status; do
#     eval "function ${hookname}() { run_hook  \"\${FUNCNAME}\"; }"
# done

function start() {
    if pid &>/dev/null; then
        warning "The server is already running."
    else
        eval $( opam config env )
        nohup server &>${logfile} &
        echo "$!" > "${pidfile}"
    fi
}

function stop {
    if pid=$( pid ); then
        kill "${pid}"
        wait_for_stop "${pid}"
        if pid &>/dev/null; then
            error "The server did not respond to the stop signal." 1
        fi
    else
        warning "The server is not running, nothing to stop."
    fi
}

function status() {
    pid
}

function restart() {
    stop
    start
}

function tidy() {
    client_message "Deleting OCaml log"
    rm -rf "${logfile}"
    run_hook "${FUNCNAME}"
}

function build() {
    "${OPENSHIFT_OCAML_CORE_DIR}bin/build-compiler" |& timestamp
    "${OPENSHIFT_OCAML_CORE_DIR}bin/build-server" |& timestamp
}

function ignore_hook() {
    echo "Skipping unused hook ${1}"
}

if [ $# -ne 1 ]; then
    usage >&2
    exit 1
fi

# Handle commands.
case "${1}" in
    build|start|stop|restart|status|tidy)
        "${1}";;
    *) ignore_hook "${1}";;
esac
